name: Build Alfa CLI

on:
  push:
    branches: [ main ]
    paths:
      - 'bin/**'
      - 'lib/**'
  workflow_dispatch:

jobs:
  # tag:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15

  #   outputs:
  #     tag: ${{ steps.create-tag.outputs.tag }}

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: '0'
  #     - name: Bump version and create tag
  #       id: create-tag
  #       uses: anothrNick/github-tag-action@1.40.0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         WITH_V: true

  # release:
  #   needs: tag
  #   runs-on: ${{ matrix.os }}
  #   timeout-minutes: 15

  #   strategy:
  #     matrix:
  #       os: [ ubuntu-latest, macos-latest ]

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: '0'

  #     - uses: dart-lang/setup-dart@v1.3
  #       with:
  #         sdk: stable

  #     - name: Install dependencies
  #       run: dart pub get

  #     - name: Compile Executable
  #       id: compile
  #       run: |
  #         make

  #         ./rename.sh

  #     - name: Upload binary to release
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         file: alfa_*
  #         tag: ${{ needs.tag.outputs.tag }}
  #         file_glob: true

  release-on-arm:
    # needs: tag
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Setup non-x86 emulation with qemu
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes --credential yes

      - name: Build arm executable with docker
        run: |
          docker run \
            --rm \
            -t \
            -v "${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE}" \
            --platform linux/arm64 \
            dart:stable \
            uname -a
      
      # - uses: uraimo/run-on-arch-action@v2
      #   name: Build Arm Executable
      #   with:
      #     arch: aarch64
      #     distro: ubuntu_latest

      #     install: |
      #       # installs dependencies
      #       apt-get update
      #       apt-get install -y --no-install-recommends ca-certificates curl dnsutils git openssh-client unzip

      #       # install latest stable dart version for arm64
      #       SDK="dartsdk-linux-arm64-release.zip"
      #       DART_SDK="/usr/lib/dart"

      #       curl -fLO "https://storage.googleapis.com/dart-archive/channels/stable/release/latest/sdk/$SDK"
      #       unzip "$SDK" && mv dart-sdk "$DART_SDK" && rm "$SDK" \
      #         && chmod 755 "$DART_SDK" && chmod 755 "$DART_SDK/bin"

      #       export PATH="$DART_SDK/bin:$PATH"

      #       # cleans up
      #       rm -rf \
      #         /var/cache/debconf/* \
      #         /var/lib/apt/lists/* \
      #         /tmp/* \
      #         /var/tmp/*

      #     run: |
      #       # installs dependencies
      #       dart pub get

      #       # builds executable
      #       make

      #       # renames executable
      #       ./rename.sh

      - name: Testing
        run: |
          ls -alth

      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     file: alfa_*
      #     tag: ${{ needs.tag.outputs.tag }}
      #     file_glob: true
